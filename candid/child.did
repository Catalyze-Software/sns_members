type ApiError = variant {
  SerializeError : ErrorMessage;
  DeserializeError : ErrorMessage;
  NotFound : ErrorMessage;
  ValidationError : vec ValidationResponse;
  CanisterAtCapacity : ErrorMessage;
  UpdateRequired : UpdateMessage;
  Unauthorized : ErrorMessage;
  Unexpected : ErrorMessage;
  BadRequest : ErrorMessage;
};
type ErrorMessage = record {
  tag : text;
  message : text;
  inputs : opt vec text;
  location : text;
};
type HttpHeader = record { value : text; name : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type Invite = record {
  updated_at : nat64;
  invite_type : InviteType;
  created_at : nat64;
};
type InviteMemberResponse = record {
  "principal" : principal;
  group_identifier : principal;
  invite : Invite;
  member_identifier : principal;
};
type InviteType = variant { OwnerRequest; UserRequest };
type Join = record { updated_at : nat64; created_at : nat64; roles : vec text };
type JoinedMemberResponse = record {
  "principal" : principal;
  group_identifier : principal;
  member_identifier : principal;
  roles : vec text;
};
type Member = record {
  "principal" : principal;
  invites : vec record { principal; Invite };
  joined : vec record { principal; Join };
  profile_identifier : principal;
};
type Result = variant { Ok : record { principal; Member }; Err : ApiError };
type Result_1 = variant { Ok; Err : ApiError };
type Result_2 = variant { Ok : principal; Err : ApiError };
type Result_3 = variant { Ok; Err };
type Result_4 = variant { Ok : vec InviteMemberResponse; Err : ApiError };
type Result_5 = variant { Ok : JoinedMemberResponse; Err : ApiError };
type Result_6 = variant { Ok : vec JoinedMemberResponse; Err : ApiError };
type Result_7 = variant { Ok : record { principal; vec text }; Err : text };
type UpdateMessage = record { canister_principal : principal; message : text };
type ValidationResponse = record { field : text; message : text };
service : (principal, text, nat64) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  accept_cycles : () -> (nat64);
  accept_owner_request_group_invite : (principal) -> (Result);
  accept_user_request_group_invite : (principal, principal) -> (Result);
  add_entry_by_parent : (vec nat8) -> (Result_1);
  add_owner : (principal, principal) -> (Result_2);
  assign_role : (text, principal, principal) -> (Result_3);
  clear_backup : () -> ();
  create_empty_member : (principal, principal) -> (Result_2);
  download_chunk : (nat64) -> (record { nat64; vec nat8 }) query;
  finalize_upload : () -> (text);
  get_chunked_invite_data : (principal, nat64, nat64) -> (
      vec nat8,
      record { nat64; nat64 },
    ) query;
  get_chunked_join_data : (principal, nat64, nat64) -> (
      vec nat8,
      record { nat64; nat64 },
    ) query;
  get_group_invites : (principal) -> (Result_4);
  get_group_invites_count : (vec principal) -> (
      vec record { principal; nat64 },
    ) query;
  get_group_member : (principal, principal) -> (Result_5) query;
  get_group_members : (principal) -> (Result_6) query;
  get_group_members_count : (vec principal) -> (
      vec record { principal; nat64 },
    ) query;
  get_groups_for_members : (vec principal) -> (
      vec record { principal; vec principal },
    ) query;
  get_member : (principal) -> (opt Member) query;
  get_member_roles : (principal, principal) -> (Result_7) query;
  get_self : () -> (Result) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  invite_to_group : (principal, principal) -> (Result);
  join_group : (principal, opt text) -> (Result);
  leave_group : (principal) -> (Result_1);
  remove_invite : (principal) -> (Result_1);
  remove_member_from_group : (principal, principal) -> (Result_1);
  remove_member_invite_from_group : (principal, principal) -> (Result_1);
  remove_role : (text, principal, principal) -> (Result_3);
  restore_data : () -> ();
  set_roles : (vec text, principal, principal) -> (Result_3);
  total_chunks : () -> (nat64) query;
  upload_chunk : (record { nat64; vec nat8 }) -> ();
}