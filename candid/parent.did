type ApiError = variant {
  SerializeError : ErrorMessage;
  DeserializeError : ErrorMessage;
  NotFound : ErrorMessage;
  ValidationError : vec ValidationResponse;
  CanisterAtCapacity : ErrorMessage;
  UpdateRequired : UpdateMessage;
  Unauthorized : ErrorMessage;
  Unexpected : ErrorMessage;
  BadRequest : ErrorMessage;
};
type CanisterType = variant {
  Empty;
  Foundation;
  Custom;
  ScalableChild;
  Scalable;
};
type ErrorMessage = record {
  tag : text;
  message : text;
  inputs : opt vec text;
  location : text;
};
type HttpHeader = record { value : text; name : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type Invite = record {
  updated_at : nat64;
  group_identifier : principal;
  invite_type : InviteType;
  created_at : nat64;
};
type InviteMemberResponse = record {
  "principal" : principal;
  group_identifier : principal;
  invite : Invite;
  member_identifier : principal;
};
type InviteType = variant { OwnerRequest; UserRequest };
type JoinedMemberResponse = record {
  "principal" : principal;
  group_identifier : principal;
  member_identifier : principal;
  roles : vec text;
};
type PagedResponse = record {
  total : nat64;
  data : vec InviteMemberResponse;
  page : nat64;
  limit : nat64;
  number_of_pages : nat64;
};
type PagedResponse_1 = record {
  total : nat64;
  data : vec JoinedMemberResponse;
  page : nat64;
  limit : nat64;
  number_of_pages : nat64;
};
type Result = variant { Ok : principal; Err : ApiError };
type Result_1 = variant { Ok : ScalableCanisterDetails; Err : text };
type ScalableCanisterDetails = record {
  entry_range : record { nat64; opt nat64 };
  "principal" : principal;
  wasm_version : WasmVersion;
  is_available : bool;
  canister_type : CanisterType;
};
type UpdateMessage = record { canister_principal : principal; message : text };
type ValidationResponse = record { field : text; message : text };
type WasmVersion = variant { None; Version : nat64; Custom };
service : () -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  accept_cycles : () -> (nat64);
  close_child_canister_and_spawn_sibling : (nat64, vec nat8) -> (Result);
  get_available_canister : () -> (Result_1) query;
  get_canisters : () -> (vec ScalableCanisterDetails) query;
  get_invites : (principal, nat64, nat64) -> (PagedResponse) query;
  get_latest_wasm_version : () -> (WasmVersion) query;
  get_members : (principal, nat64, nat64) -> (PagedResponse_1) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
}